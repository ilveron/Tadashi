#!/usr/bin/python3

"""
Phase 1 of the Tadashi pipeline:
    For each encoding in the idlvsr_encodings folder:
        - Check if there is a log file for the encoding
        - Create a folder
        - Run IDLV-SR
        - Collect the input files generated by IDLV-SR
        - Collect the ASP rewriting file generated by IDLV-SR
"""

from utils import *


def main():
    if not is_os_linux():
        raise Exception("This script is only compatible with Linux")

    filenames_list = subprocess.check_output(f"ls {ENCODINGS} | cut -d'.' -f 1", shell=True) \
        .decode("utf-8").split("\n")[0:-1]

    subprocess.call(f"rm -rf tadashi && rm -rf reasoner_input", shell=True)

    create_main_folder()
    print("PHASE 1 - I-DLV-SR OUTPUTS COLLECTION")
    for filename in filenames_list:
        print(f"Processing {filename}.idlvsr")
        if not log_exists(filename):
            print(f"There is no log file for the encoding {filename}.idlvsr. Skipping...")
            continue

        # create the folder
        subprocess.call(f"mkdir tadashi/{filename}", shell=True)

        run_idlv_sr(filename)

        if not os.path.exists(f"reasoner_input"):
            print(f"Something went wrong with {filename}.idlvsr. Skipping...")
            subprocess.check_call(f"rm -rf tadashi/{filename}", shell=True)
            continue

        collect_files(filename)


def create_main_folder():
    subprocess.call("mkdir tadashi", shell=True)


def log_exists(filename):
    return (subprocess.check_output(f"find {LOGS} -name {filename}.log", shell=True).decode("utf-8").split("\n")[0]
            == f"{LOGS}/{filename}.log")


def run_idlv_sr(filename):
    subprocess.call(
        f'java -jar {JAR} --log={LOGS}/{filename}.log --program={ENCODINGS}/{filename}.idlvsr {IDLVSR_OPTS}' +
        f' --py-script={EXTERNAL_DEFINITION}/{filename}.py 2> /dev/null | grep "^{{" >' +
        f' "./tadashi/{filename}/{filename}.json"', shell=True)


def collect_files(filename):
    input_timepoints = subprocess.check_output(f'find reasoner_input -name "input_time*" | cut -d"_" -f 6',
                                           shell=True).decode("utf-8")[0:-1].split("\n")

    # create the inputs folder
    subprocess.call(f'mkdir tadashi/{filename}/inputs', shell=True)

    for e in input_timepoints:
        file_content = subprocess.check_output(f'cat reasoner_input/*_{e}', shell=True)
        # if there's no input for this timepoint, skip it
        if "%nothing%nothing" not in file_content.decode('utf-8'):
            # merge the input files that refer to the same timepoint
            subprocess.call(f'cat reasoner_input/*_{e} > tadashi/{filename}/inputs/input_{e}', shell=True)

    # merge rewritings (if using --reasoning-mode=0, there will be only one rewriting file, hence this is not necessary)
    subprocess.call(f'cat reasoner_input/rewriting* > tadashi/{filename}/rewriting.asp', shell=True)

    # remove the reasoner_input folder
    subprocess.call(f'rm -rf reasoner_input', shell=True)

    # copy the external definition file if it exists
    if os.path.exists(f"{EXTERNAL_DEFINITION}/{filename}.py"):
        subprocess.call(f'cp {EXTERNAL_DEFINITION}/{filename}.py tadashi/{filename}/', shell=True)


def is_os_linux():
    return os.name == "posix"


if __name__ == "__main__":
    main()
